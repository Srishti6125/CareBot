# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9g60oT80vDMOCEB0BjRULai-YpVxyel
"""

import datetime
import random
import re
import json
import logging
import hashlib
from youtubesearchpython import VideosSearch
from textblob import TextBlob
from deep_translator import GoogleTranslator
from langdetect import detect
from rapidfuzz import fuzz, process

# Setup logging to file only
logging.basicConfig(
    filename='carebot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    force=True
)
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
logging.getLogger().addHandler(logging.FileHandler('carebot.log'))

# ------------------ GLOBALS & MEMORY ------------------
conversation_history = []
session_memory = {}
recent_emotions = []
user_language = 'en'
last_emotion = None
last_suggested_activity = None
last_intervention = None
asked_open_ended_for_session = set()
awaiting_sos_clarify = False
sos_clarify_retries = 0
professional_help_suggested = False
session_stage = "early"
awaiting_positive_followup = False
awaiting_anxiety_followup = False
awaiting_sadness_followup = False
SUPPORTED_LANGUAGES = ['en', 'hi']

# Activity name translations
ACTIVITY_NAMES = {
    "grounding_5_4_3_2_1": {"en": "Grounding 5-4-3-2-1", "hi": "‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°‡§ø‡§Ç‡§ó 5-4-3-2-1"},
    "breathing_4_6": {"en": "Breathing 4-6", "hi": "‡§∂‡•ç‡§µ‡§æ‡§∏ 4-6"},
    "gratitude_micro": {"en": "Gratitude Micro", "hi": "‡§ï‡•É‡§§‡§ú‡•ç‡§û‡§§‡§æ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã"},
    "mini_visualization": {"en": "Mini Visualization", "hi": "‡§Æ‡§ø‡§®‡•Ä ‡§µ‡§ø‡§ú‡§º‡•Å‡§Ö‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§®"},
    "exam_stress_break": {"en": "Exam Stress Break", "hi": "‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§§‡§®‡§æ‡§µ ‡§¨‡•ç‡§∞‡•á‡§ï"},
    "progressive_muscle_relaxation": {"en": "Progressive Muscle Relaxation", "hi": "‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡•á‡§∏‡§ø‡§µ ‡§Æ‡§∏‡§≤ ‡§∞‡§ø‡§≤‡•à‡§ï‡•ç‡§∏‡•á‡§∂‡§®"}
}

# Load session memory
try:
    with open('carebot_session.json', 'r') as f:
        session_memory = json.load(f)
        logging.info("Loaded session memory from file.")
except FileNotFoundError:
    logging.info("No session file found; starting fresh.")

# ------------------ HELPER FUNCTIONS ------------------
def now_iso():
    return datetime.datetime.now(datetime.timezone.utc).isoformat()

def today_iso_date():
    return datetime.datetime.now().date().isoformat()

def translate_text(text, target_lang='en', retries=2):
    for attempt in range(retries):
        try:
            if not text.strip():
                logging.warning(f"Empty text received for translation to lang: {target_lang}")
                return text
            if target_lang == 'en' and text in [ACTIVITY_NAMES[k][target_lang] for k in ACTIVITY_NAMES]:
                logging.info(f"Skipping translation for pre-translated activity name: '{text}'")
                return text
            if target_lang == 'hi' and text in [ACTIVITY_NAMES[k][target_lang] for k in ACTIVITY_NAMES]:
                logging.info(f"Skipping translation for pre-translated Hindi activity name: '{text}'")
                return text
            translated = GoogleTranslator(source='auto', target=target_lang).translate(text)
            if translated is None or translated.strip() == '':
                logging.error(f"Translation failed (None/empty) for text: '{text}' to lang: {target_lang}")
                continue
            logging.info(f"Translated '{text}' to '{translated}' for lang: {target_lang}")
            return translated
        except Exception as e:
            logging.error(f"Translation error for text '{text}' to lang '{target_lang}': {e}")
            if attempt == retries - 1:
                return text
    return text

def detect_language_safe(text, prev_lang='en'):
    try:
        confirmation_words = ["ok", "okay", "yes", "yess", "sure", "‡§†‡•Ä‡§ï ‡§π‡•à", "‡§π‡§æ‡§Å", "‡§ö‡§≤‡§ø‡§è ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç"]
        positive_phrases = ["feeling better", "getting better", "improving", "less sad", "not as anxious", "not as angry", "feeling relieved", "relieved from", "better", "fine", "good", "great", "‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏", "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó ‡§∞‡§π‡§æ"]
        if not text or len(text.strip()) < 5 or text.lower().strip() in confirmation_words or any(p in text.lower() for p in positive_phrases):
            logging.info(f"Short, confirmation, or positive input '{text}'; using previous language: {prev_lang}")
            return prev_lang
        lang = detect(text)
        if lang not in SUPPORTED_LANGUAGES:
            logging.info(f"Detected unsupported language '{lang}' for input '{text}'; using previous: {prev_lang}")
            return prev_lang
        logging.info(f"Detected language: {lang} for input: {text}")
        return lang
    except Exception as e:
        logging.error(f"Language detection error: {e}")
        return prev_lang

def save_session():
    try:
        with open('carebot_session.json', 'w') as f:
            json.dump(session_memory, f)
        logging.info("Saved session memory to file.")
    except Exception as e:
        logging.error(f"Failed saving session memory: {e}")

# ------------------ ACTIVITIES ------------------
activities = {
    "grounding_5_4_3_2_1": [
        "Name 5 things you can see around you.",
        "Name 4 things you can touch around you.",
        "Name 3 things you can hear.",
        "Name 2 things you can smell.",
        "Name 1 thing you can taste."
    ],
    "breathing_4_6": [
        "Inhale slowly for 4 seconds.",
        "Exhale slowly for 6 seconds.",
        "Repeat for 5 cycles."
    ],
    "gratitude_micro": [
        "Think of 3 things you are grateful for right now.",
        "Write them down or say them aloud."
    ],
    "mini_visualization": [
        "Close your eyes and imagine a safe place.",
        "Notice the colors, sounds, and feelings there.",
        "Stay there for 30 seconds."
    ],
    "exam_stress_break": [
        "Take a 5-minute break from studying.",
        "Close your eyes and breathe deeply for 10 breaths.",
        "Visualize completing your exam confidently."
    ],
    "progressive_muscle_relaxation": [
        "Tense your feet for 5 seconds, then relax.",
        "Tense your calves for 5 seconds, then relax.",
        "Continue up your body: thighs, abdomen, chest, arms, neck, face.",
        "Breathe deeply throughout."
    ]
}

def run_activity(activity_key, lang='en'):
    global last_suggested_activity, user_language, last_intervention
    if activity_key not in activities:
        resp = "CareBot: Sorry, I don't know that activity yet."
        logging.info(f"Attempted unknown activity: {activity_key}, lang: {lang}")
        return translate_text(resp, lang)

    logging.info(f"Running activity: {activity_key} with lang: {lang} (user_language: {user_language})")
    steps = activities[activity_key]
    activity_name = ACTIVITY_NAMES.get(activity_key, {"en": activity_key.replace('_', ' ').title(), "hi": activity_key.replace('_', ' ').title()})[lang]
    carebot_label = translate_text("CareBot", lang)
    activity_label = translate_text("Activity", lang)
    header = f"{carebot_label}: {activity_label} - {activity_name}"
    response = f"\n{header}\n"
    for step in steps:
        translated_step = translate_text(step, lang)
        response += f"> {translated_step}\n"
    completion_message = "Take your time to complete the activity and share how you‚Äôre feeling afterward. üåø Would you like to try another activity, enjoy some music, explore a yoga video, chat a bit more, or end the session?"
    translated_completion = translate_text(completion_message, lang)
    response += f"\n{translated_completion}\n"

    date = today_iso_date()
    if date not in session_memory:
        session_memory[date] = {"emotions": [], "interventions": []}
    session_memory[date]["interventions"].append(activity_key)
    last_intervention = activity_key
    save_session()

    last_suggested_activity = None
    logging.info(f"Activity {activity_key} completed, set last_intervention: {last_intervention}, response: {response}")
    return response

# ------------------ MEDIA ------------------
MEDIA_PLAYLISTS = {
    "sadness": {
        "music": [
            "https://www.youtube.com/watch?v=XqYTfpxFuDM",  # Best Slowed Songs Playlist ‚Äì Sad songs
            "https://www.youtube.com/playlist?list=PLyORnIW1xT6wOsrPFVQ5AiR9P2VyArzj4"  # Top 50 Most Listened Sad Songs That Make You Cry
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=yqeirBfn2j4",  # 15 Min. Yoga Stretch for Stress & Anxiety Relief
            "https://www.youtube.com/watch?v=bJJWArRfKa0"   # Yoga For Anxiety ‚Äì 20 Minute Practice ‚Äì Yoga With Adriene
        ]
    },
    "anxiety": {
        "music": [
            "https://www.youtube.com/playlist?list=PLyORnIW1xT6wOsrPFVQ5AiR9P2VyArzj4",  # shared sad/emotional list
            "https://www.youtube.com/watch?v=XqYTfpxFuDM"
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=ggbThiL7GNE",  # 30 Min Yoga For Stress & Anxiety / Full Reset
            "https://www.youtube.com/watch?v=liXcnotlBKc"    # 10 min Somatic Yoga for Anxiety Relief
        ]
    },
    "joy": {
        "music": [
            "https://www.youtube.com/playlist?list=PLgzTt0k8mXzHcKebL8d0uYHfawiARhQja"  # Best Sad/Emotional songs, but maybe include some happier songs later
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=liXcnotlBKc"  # the Somatic Yoga for Anxiety Relief ‚Äì calm and positive vibes
        ]
    },
    "neutral": {
        "music": [
            "https://www.youtube.com/playlist?list=PLgzTt0k8mXzHcKebL8d0uYHfawiARhQja"  # emotional but mellow songs
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=yqeirBfn2j4"
        ]
    },
    "anger": {
        "music": [
            "https://www.youtube.com/watch?v=XqYTfpxFuDM",  # intense / emotional music
            "https://www.youtube.com/playlist?list=PLyORnIW1xT6wOsrPFVQ5AiR9P2VyArzj4"
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=ggbThiL7GNE"  # full-body release type flow
        ]
    },
    "fear": {
        "music": [
            "https://www.youtube.com/watch?v=XqYTfpxFuDM",
            "https://www.youtube.com/watch?v=BestSlowedSongsPlaylistURL"  # placeholder: you‚Äôll need to search
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=liXcnotlBKc"
        ]
    },
    "hopelessness": {
        "music": [
            "https://www.youtube.com/playlist?list=PLyORnIW1xT6wOsrPFVQ5AiR9P2VyArzj4",
            "https://www.youtube.com/watch?v=XqYTfpxFuDM"
        ],
        "yoga_exercise": [
            "https://www.youtube.com/watch?v=bJJWArRfKa0"
        ]
    }
}


def recommend_media(emotion, media_type="music", lang='en'):
    global last_intervention
    query_map = {
        "sadness": {"music": "happy uplifting playlist", "yoga_exercise": "gentle yoga for relaxation"},
        "anxiety": {"music": "calming relaxation playlist", "yoga_exercise": "yoga for anxiety relief"},
        "joy": {"music": "celebration playlist", "yoga_exercise": "energizing yoga flow"},
        "neutral": {"music": "chill vibes playlist", "yoga_exercise": "gentle yoga for beginners"},
        "anger": {"music": "anger release playlist", "yoga_exercise": "yoga for anger management"},
        "fear": {"music": "overcoming fear playlist", "yoga_exercise": "yoga for stress and fear"},
        "hopelessness": {"music": "hopeful uplifting playlist", "yoga_exercise": "restorative yoga for hope"}
    }
    query = query_map.get(emotion, {"music": "chill vibes playlist", "yoga_exercise": "gentle yoga for beginners"})[media_type]
    youtube_url = None
    try:
        videosSearch = VideosSearch(query, limit=1)
        youtube_url = videosSearch.result()['result'][0]['link']
        logging.info(f"YouTube search successful for query '{query}': {youtube_url}")
    except Exception as e:
        logging.error(f"YouTube search error for query '{query}': {e}")
        youtube_url = random.choice(MEDIA_PLAYLISTS.get(emotion, MEDIA_PLAYLISTS["neutral"])[media_type])
        logging.info(f"Falling back to pre-defined {media_type} playlist: {youtube_url}")

    media_label = translate_text("Media Link" if media_type == "music" else "Yoga/Exercise Video", lang)
    response = f"\nüé∂ {translate_text(f'CareBot {media_type.title()} Suggestion', lang)} üé∂\n{media_label}: {youtube_url}\n{translate_text(f'{media_type.title()} is ready! How are you feeling now? Want another activity, more music, a yoga/exercise video, or just to chat?', lang)}\n"

    date = today_iso_date()
    if date not in session_memory:
        session_memory[date] = {"emotions": [], "interventions": []}
    session_memory[date]["interventions"].append(f"{media_type}_recommendation")
    last_intervention = f"{media_type}_recommendation"
    save_session()
    logging.info(f"Media {media_type} recommended, set last_intervention: {last_intervention}")

    return response

# ------------------ SOS ------------------
SOS_KEYWORDS = [
    "suicide", "kill myself", "end it all", "die", "overdose",
    "jump off", "self harm", "worthless", "don't want to live",
    "tired of living", "end my life", "want to die",
    "‡§Ü‡§§‡•ç‡§Æ‡§π‡§§‡•ç‡§Ø‡§æ", "‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§Æ‡§æ‡§∞‡§®‡§æ", "‡§ú‡•Ä‡§µ‡§® ‡§ñ‡§§‡•ç‡§Æ ‡§ï‡§∞‡§®‡§æ", "‡§∏‡§¨ ‡§ñ‡§º‡§§‡•ç‡§Æ ‡§ï‡§∞ ‡§¶‡•Ç‡§Å",
    "‡§Æ‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å", "‡§ú‡•Ä‡§®‡•á ‡§ï‡•Ä ‡§á‡§ö‡•ç‡§õ‡§æ ‡§®‡§π‡•Ä‡§Ç"
]

ACADEMIC_KEYWORDS = ["exam", "test", "study", "studies", "failed", "marks", "grades", "forgot", "forgotten", "‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ"]
NEGATION_WORDS = ["embarrassment", "laugh", "funny", "joke", "kidding"]

def detect_sos_refined(user_message, lang='en'):
    text_en = translate_text(user_message, 'en').lower()
    text_orig = user_message.lower() if lang == 'hi' else text_en
    logging.info(f"SOS check - Original: '{text_orig}', Translated: '{text_en}'")

    # Skip SOS check for command keywords
    command_keywords = [kw for cmd in COMMANDS.values() for kw in cmd]
    if text_orig in command_keywords:
        logging.info(f"SOS check skipped: input '{text_orig}' is a command keyword")
        return 'no'

    if any(neg in text_en for neg in NEGATION_WORDS) or any(neg in text_orig for neg in NEGATION_WORDS):
        logging.info("SOS negated due to negation words")
        return 'no'

    has_academic = any(kw in text_en for kw in ACADEMIC_KEYWORDS) or any(kw in text_orig for kw in ACADEMIC_KEYWORDS)
    has_sos = False
    for kw in SOS_KEYWORDS:
        if kw in text_en or kw in text_orig:
            has_sos = True
            logging.info(f"SOS keyword matched exactly: '{kw}'")
            break
        try:
            match_en, score_en, _ = process.extractOne(text_en, [kw], scorer=fuzz.partial_ratio)
            match_orig, score_orig, _ = process.extractOne(text_orig, [kw], scorer=fuzz.partial_ratio)
            if score_en >= 85 or score_orig >= 85:  # Increased threshold to reduce false positives
                has_sos = True
                logging.info(f"SOS keyword fuzzy matched: '{kw}' (score_en: {score_en}, score_orig: {score_orig})")
                break
        except Exception as e:
            logging.error(f"Fuzzy match error for SOS keyword '{kw}': {e}")

    if has_sos and not has_academic:
        logging.info("SOS detected: 'yes'")
        return 'yes'
    if has_sos and has_academic:
        logging.info("SOS detected: 'clarify' due to academic keywords")
        return 'clarify'
    if not has_sos:
        logging.info("No SOS detected")
        return 'no'

def sos_response_text(lang='en'):
    response_segments = [
            "üíô I feel the weight of your pain, and I‚Äôm right here with you‚Äîyou‚Äôre not alone.",
            "If you‚Äôre thinking of hurting yourself, please reach out for help right now:",
            "‚Ä¢ üìû In India: 9152987821 (Vandrevala Helpline)",
            "‚Ä¢ üìû Worldwide: +1-800-273-8255 (Crisis Text Line)",
            "You are so worthy of care and safety. üíô Let‚Äôs find a way through this together."
        ]

    translated_segments = []
    for segment in response_segments:
        translated = translate_text(segment, lang)
        if translated.strip() == segment.strip() and lang != 'en':
            logging.warning(f"Translation unchanged for segment '{segment}' to lang '{lang}'")
        translated_segments.append(translated)

    response = "\n".join(translated_segments)
    logging.info(f"SOS response generated in lang '{lang}': {response}")
    return response

# ------------------ EMOTION DETECTION ------------------
EMOTION_KEYWORDS = {
    "sadness": [
        "sad", "low", "down", "depressed", "cry", "unhappy", "miserable", "hopeless",
        "‡§â‡§¶‡§æ‡§∏", "‡§¶‡•Å‡§ñ‡•Ä", "‡§®‡§ø‡§∞‡§æ‡§∂", "‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™‡•Ä ‡§®‡§π‡•Ä‡§Ç", "‡§≠‡§æ‡§∞‡•Ä ‡§≤‡§ó‡§§‡§æ ‡§π‡•à", "‡§•‡§ï ‡§ó‡§Ø‡§æ"
    ],
    "anxiety": [
        "stressed", "stress", "tensed", "pressure", "anxious", "nervous", "worried", "afraid", "panic",
        "‡§§‡§®‡§æ‡§µ", "‡§ö‡§ø‡§Ç‡§§‡§æ", "‡§ò‡§¨‡§∞‡§æ‡§π‡§ü"
    ],
    "joy": [
        "happy", "joy", "excited", "great", "good", "awesome", "wonderful", "amazing",
        "‡§ñ‡•Å‡§∂", "‡§Ü‡§®‡§Ç‡§¶", "‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§"
    ],
    "anger": [
        "angry", "mad", "frustrated", "annoyed", "irritated", "furious",
        "‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ", "‡§ï‡•ç‡§∞‡•ã‡§ß"
    ],
    "fear": [
        "scared", "fear", "terrified", "afraid", "nervous",
        "‡§°‡§∞", "‡§≠‡§Ø"
    ],
    "hopelessness": [
        "nothing helps", "hopeless", "end it all", "tired of living", "worthless", "don‚Äôt want to live",
        "‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§Æ‡§¶‡§¶ ‡§®‡§π‡•Ä‡§Ç", "‡§®‡§ø‡§∞‡§æ‡§∂‡§æ", "‡§∏‡§¨ ‡§ñ‡§º‡§§‡•ç‡§Æ", "‡§ú‡•Ä‡§®‡•á ‡§ï‡•Ä ‡§á‡§ö‡•ç‡§õ‡§æ ‡§®‡§π‡•Ä‡§Ç"
    ]
}

def detect_emotion(user_input, last_emotion=None):
    global last_suggested_activity
    translated_input = translate_text(user_input, 'en')
    text_en = translated_input.lower().strip()
    text_orig = user_input.lower().strip() if user_language == 'hi' else text_en
    logging.info(f"Emotion detection - Original: '{text_orig}', Translated: '{text_en}'")

    confirmation_words = ["ok", "okay", "yes", "yess", "sure", "‡§†‡•Ä‡§ï ‡§π‡•à", "‡§π‡§æ‡§Å", "‡§ö‡§≤‡§ø‡§è ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç"]
    if last_suggested_activity and any(w in text_en for w in confirmation_words) or any(w in text_orig for w in confirmation_words):
        logging.info(f"Detected confirmation '{text_orig}' for activity: {last_suggested_activity}")
        return "neutral"

    meta_comments = ["issue", "problem", "bug", "error", "same issue"]
    if any(mc in text_en for mc in meta_comments) or any(mc in text_orig for mc in meta_comments):
        logging.info(f"Detected meta-comment: {text_orig}")
        return "neutral"

    for kw in SOS_KEYWORDS:
        if kw in text_en or kw in text_orig:
            logging.info(f"SOS keyword '{kw}' detected in emotion check; defaulting to hopelessness")
            return "hopelessness"
        try:
            match_en, score_en, _ = process.extractOne(text_en, [kw], scorer=fuzz.partial_ratio)
            match_orig, score_orig, _ = process.extractOne(text_orig, [kw], scorer=fuzz.partial_ratio)
            if score_en >= 85 or score_orig >= 85:
                logging.info(f"SOS keyword fuzzy matched: '{kw}' (score_en: {score_en}, score_orig: {score_orig}); defaulting to hopelessness")
                return "hopelessness"
        except Exception as e:
            logging.error(f"Fuzzy match error in emotion detection for SOS keyword '{kw}': {e}")

    positive_shorts = ["better", "feeling better", "i'm better", "im better", "i am better", "fine", "good", "great", "‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏", "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó ‡§∞‡§π‡§æ"]
    for p in positive_shorts:
        if p in text_en or p in text_orig:
            if last_emotion in ["sadness", "anxiety", "fear", "anger", "hopelessness"]:
                logging.info("Manual override: detected improvement -> relief")
                return "relief"
            return "joy"

    neutral_shorts = ["idk", "not sure", "maybe", "i don't know", "hmm"]
    for n in neutral_shorts:
        if n in text_en or n in text_orig:
            return "neutral"

    command_keywords = [kw for cmd in COMMANDS.values() for kw in cmd]
    if text_orig in command_keywords:
        logging.info(f"Emotion detection skipped: input '{text_orig}' is a command keyword")
        return "neutral"

    best_emotion = None
    best_score = 0
    for emotion, keywords in EMOTION_KEYWORDS.items():
        try:
            match_en, score_en, _ = process.extractOne(text_en, keywords, scorer=fuzz.partial_ratio)
            match_orig, score_orig, _ = process.extractOne(text_orig, keywords, scorer=fuzz.partial_ratio)
            score = max(score_en, score_orig)
        except Exception:
            match_en, match_orig, score = None, None, 0
        if score > best_score and score >= 60:
            best_score = score
            best_emotion = emotion
            logging.info(f"Emotion '{emotion}' matched: score_en={score_en}, score_orig={score_orig}, match_en='{match_en}', match_orig='{match_orig}'")

    if not best_emotion:
        improvement_phrases = [
            "feeling better", "getting better", "improving", "less sad",
            "not as anxious", "not as angry", "feeling relieved", "relieved from",
            "‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏", "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó ‡§∞‡§π‡§æ"
        ]
        if any(phrase in text_en for phrase in improvement_phrases) or any(phrase in text_orig for phrase in improvement_phrases):
            if last_emotion in ["sadness", "anxiety", "fear", "anger", "hopelessness"]:
                best_emotion = "relief"
            else:
                best_emotion = "joy"

    if not best_emotion:
        try:
            polarity = TextBlob(translated_input).sentiment.polarity
            if polarity < -0.1:
                best_emotion = "sadness"
            elif polarity < 0.2:
                best_emotion = "neutral"
            else:
                best_emotion = "joy"
            logging.info(f"TextBlob polarity: {polarity}, assigned emotion: {best_emotion}")
        except Exception as e:
            logging.error(f"TextBlob error: {e}")
            best_emotion = "neutral"

    if last_emotion and best_emotion != last_emotion:
        if best_emotion == "joy" and last_emotion in ["sadness", "anxiety", "anger", "fear", "hopelessness"] and best_score < 90:
            logging.info("Smoothing: preventing abrupt negative->joy flip")
            best_emotion = last_emotion

    logging.info(f"Detected emotion: {best_emotion} (last: {last_emotion}, score: {best_score})")
    return best_emotion

# ------------------ COMMANDS ------------------
COMMANDS = {
    "book": ["book", "appointment", "schedule", "therapist", "counselor", "‡§¨‡•Å‡§ï", "‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø", "‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤"],
    "resources": ["resource", "guide", "video", "audio", "material", "‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®", "‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ"],
    "peer_support": ["peer", "community", "share", "support", "‡§∏‡§π‡§ï‡§∞‡•ç‡§Æ‡•Ä", "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø", "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ"],
    "activities": ["activity", "activities", "exercise", "coping", "‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø", "‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Å"],
    "music": ["music", "song", "playlist", "‡§∏‡§Ç‡§ó‡•Ä‡§§", "‡§ó‡•Ä‡§§"],
    "yoga_exercise": ["yoga", "exercise", "workout", "physical", "‡§Ø‡•ã‡§ó", "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ"],
    "summary": ["summary", "session summary", "report", "‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂", "‡§∏‡§§‡•ç‡§∞ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"],
    "help": ["help", "commands", "what can you do", "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", "‡§ï‡§Æ‡§æ‡§Ç‡§°"],
    "reset": ["reset", "clear session", "‡§∞‡•Ä‡§∏‡•á‡§ü", "‡§∏‡§§‡•ç‡§∞ ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç"],
    "exit": ["quit", "exit", "end", "end session", "‡§∏‡§Æ‡§æ‡§™‡•ç‡§§", "‡§¨‡§Ç‡§¶", "‡§ñ‡§§‡•ç‡§Æ", "‡§∏‡§§‡•ç‡§∞ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§"]
}

def match_command(user_input):
    commands = {
        "help": "help",
        "summary": "summary",
        "reset": "reset",
        "book": "book",
        "resources": "resources",
        "peer_support": "peer_support",
        "music": "music",
        "yoga_exercise": "yoga_exercise",
        "activities": "activities",
        "activity": "activities",
        "exit": "exit"
    }
    text = user_input.lower().strip()
    for cmd, action in commands.items():
        try:
            if text in COMMANDS[cmd]:
                logging.info(f"Detected command: {text} -> {action}")
                return action
        except KeyError as e:
            logging.error(f"KeyError in match_command for cmd: {cmd}, input: {text}, error: {e}")
            return None
    # Check for fuzzy match only for longer inputs
    if len(text) > 10:
        all_command_keywords = [kw for cmd in COMMANDS.values() for kw in cmd]
        try:
            match, score, _ = process.extractOne(text, all_command_keywords, scorer=fuzz.partial_ratio)
            if score >= 90:
                for cmd, action in commands.items():
                    if match in COMMANDS[cmd]:
                        logging.info(f"Fuzzy matched command: {text} -> {match} (score: {score}) -> {action}")
                        return action
        except Exception as e:
            logging.error(f"Fuzzy match error in match_command for input '{text}': {e}")
    logging.info(f"No command matched for input: {text}")
    return None

# ------------------ RESPONSES ------------------
small_talk_replies = [
    "I‚Äôm all ears‚Äîtell me more about what‚Äôs on your mind. üíô",
    "Your thoughts light the way. What‚Äôs stirring in your heart?",
    "I‚Äôm here for you. Want to share a bit more? üåø",
    "Your story matters. Care to tell me what‚Äôs going on?"
]

empathetic_replies = {
    "sadness": [
        "I‚Äôm really sorry you‚Äôre feeling low. üíô Want to tell me what‚Äôs on your heart?",
        "It‚Äôs okay to feel heavy sometimes‚ÄîI‚Äôm here for you. üåø",
        "Sad days can feel endless, but you‚Äôre not alone. Want to share a little more?",
        "My heart is with you right now. üíô What‚Äôs been weighing you down?"
    ],
    "anxiety": [
        "I hear how overwhelming this feels. üíô Want to talk through what‚Äôs on your mind?",
        "Anxiety can feel like too much‚ÄîI‚Äôm right here with you. üå∏",
        "That sounds really tough. Want to share what‚Äôs been stirring this worry?",
        "You‚Äôre not alone in this storm. üíô Let‚Äôs take a breath together."
    ],
    "joy": [
        "Your happiness makes me smile too! üåü What‚Äôs bringing you so much joy?",
        "That sounds wonderful! üåà Want to tell me more about it?",
        "I love hearing this‚Äîit‚Äôs so uplifting! üíô",
        "Your joy is contagious. ‚ú® Want to hold onto this feeling together?"
    ],
    "relief": [
        "I‚Äôm so glad you‚Äôre feeling lighter. üíô Want to share what helped?",
        "That‚Äôs wonderful‚Äîyour calm shines through. üåø",
        "It sounds like a weight has lifted. üíô What brought this peace?",
        "Hearing this makes me happy for you! ‚ú®"
    ],
    "anger": [
        "I can feel how strong this is for you. üíô Want to tell me what sparked it?",
        "It‚Äôs okay to feel angry‚ÄîI‚Äôm here to listen. üåø",
        "That sounds really frustrating. üíô Want to share more?",
        "I hear the fire in your words. What‚Äôs been happening?"
    ],
    "fear": [
        "It‚Äôs okay to feel scared‚Äîyou‚Äôre safe here. üíô Want to tell me more?",
        "I hear your fear, and I‚Äôm right here beside you. üåø",
        "That must feel unsettling. üíô Want to share what‚Äôs worrying you?",
        "You‚Äôre not alone in this‚ÄîI‚Äôm here to listen. üíô"
    ],
    "hopelessness": [
        "I‚Äôm so sorry you‚Äôre feeling this heavy. üíô Want to talk a little about it?",
        "You don‚Äôt have to carry this alone‚ÄîI‚Äôm here with you. üåø",
        "This sounds so hard. üíô Want to try sharing or maybe a gentle breathing break?",
        "Even now, your worth shines. üíô Let‚Äôs try to find a small spark together."
    ],
    "neutral": [
        "I‚Äôm here, ready to listen. üíô What‚Äôs on your mind right now?",
        "Thanks for sharing. üåø Want to talk more, or try something calming?",
        "I‚Äôm all ears. üíô What would you like to explore together?",
        "Your thoughts matter‚ÄîI‚Äôm here whether you want to chat or just sit in calm."
    ]
}


def suggest_professional_help(lang='en'):
    resp = (
    "I hear that you‚Äôve been feeling low üíô.\n"
    "Talking to a counselor or therapist could really help ease the weight.\n"
    "For now, would you like to chat more, try an activity, listen to music, or do a calming yoga video?"
)
    return translate_text(resp, lang)

def get_session_summary(date=None, lang='en'):
    if not session_memory:
        return translate_text("No session data yet.", lang)
    response = "CareBot Session Summary:\n"
    dates = [date] if date else sorted(session_memory.keys())
    for d in dates:
        if d in session_memory:
            data = session_memory[d]
            response += f"Date: {d}\n"
            response += "Emotions: " + ", ".join(set(data.get("emotions", []))) + "\n"
            response += "Interventions: " + ", ".join(set(data.get("interventions", []))) + "\n\n"
    return translate_text(response, lang)

def get_help(lang='en'):
    cmds = ", ".join([k for k in COMMANDS.keys() if k != "exit"])
    acts = ", ".join([ACTIVITY_NAMES[k][lang] for k in activities.keys()])
    resp = f"Available commands: {cmds}\nActivities: {acts}\nType feelings to chat, or use commands like 'music', 'yoga', or 'activities'."
    return translate_text(resp, lang)

# ------------------ MAIN REPLY ------------------
def carebot_reply(user_input):
    global awaiting_sos_clarify, user_language, last_emotion, last_suggested_activity
    global asked_open_ended_for_session, sos_clarify_retries, professional_help_suggested
    global session_stage, recent_emotions, last_intervention, awaiting_positive_followup
    global awaiting_anxiety_followup, awaiting_sadness_followup

    # Input validation
    if len(user_input) > 500:
        return translate_text("CareBot: Input too long. Please keep it under 500 characters.", user_language), "neutral"

    # Update user_language
    prev_language = user_language
    user_language = detect_language_safe(user_input, prev_lang=user_language)
    logging.info(f"Processing input: '{user_input}', user_language: {user_language}")

    # Update session_stage
    if len(conversation_history) >= 6:
        session_stage = "late"
    elif len(conversation_history) >= 2:
        session_stage = "mid"
    else:
        session_stage = "early"

    lower = user_input.lower().strip()

    # Check for exit command
    if lower in COMMANDS["exit"]:
        logging.info(f"Exit command detected: {user_input}")
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        return translate_text("CareBot: Take care! üíô", user_language), "neutral"

    # Handle positive follow-up response
    if awaiting_positive_followup:
        awaiting_positive_followup = False
        reply = f"Thanks for sharing! I'm glad you're feeling better. Would you like to continue chatting, try an activity, listen to music, try a yoga/exercise video, or end the session?"
        conversation_history.append(user_input)
        last_suggested_activity = None
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), last_emotion

    # Handle anxiety follow-up response
    if awaiting_anxiety_followup:
        awaiting_anxiety_followup = False
        reply = f"Thanks for sharing. That sounds really challenging. Would you like to try a calming activity, listen to music, or watch a yoga/exercise video to help ease the stress?"
        if 'exam' in lower or 'test' in lower or 'study' in lower or '‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ' in lower:
            last_suggested_activity = "exam_stress_break"
            reply += f" Since you mentioned exams, I recommend the '{ACTIVITY_NAMES['exam_stress_break'][user_language]}' activity. Want to try it?"
        conversation_history.append(user_input)
        last_suggested_activity = last_suggested_activity or "breathing_4_6"
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), last_emotion

    # Handle sadness follow-up response
    if awaiting_sadness_followup:
        awaiting_sadness_followup = False
        reply = f"Thanks for sharing. That sounds really tough. Would you like to try a gentle activity to lift your mood, listen to music, or watch a yoga/exercise video?"
        last_suggested_activity = "gratitude_micro"
        reply += f" I recommend the '{ACTIVITY_NAMES['gratitude_micro'][user_language]}' activity to help you focus on some positive moments. Want to try it?"
        conversation_history.append(user_input)
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), last_emotion

    # Command matching (prioritized over SOS and emotion detection)
    cmd = match_command(user_input)
    if cmd:
        last_suggested_activity = None
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Command detected: {cmd}, last_emotion: {last_emotion}")
        if cmd == "exit":
            return translate_text("CareBot: Take care! üíô", user_language), "neutral"
        if cmd == "book":
            return translate_text("Booking feature is available. Please specify counselor and time.", user_language), "neutral"
        elif cmd == "resources":
            return translate_text("Resource feature is available. Please specify type: guardio, audio, video.", user_language), "neutral"
        elif cmd == "peer_support":
            return translate_text("Peer support feature is available. You can share or read messages.", user_language), "neutral"
        elif cmd == "activities":
            activity_list = ", ".join([ACTIVITY_NAMES[k][user_language] for k in activities.keys()])
            return translate_text(f"Here are some activities you can try: {activity_list}. Which one would you like?", user_language), "neutral"
        elif cmd == "music":
            emotion = last_emotion or "neutral"
            return recommend_media(emotion, "music", user_language), emotion
        elif cmd == "yoga_exercise":
            emotion = last_emotion or "neutral"
            return recommend_media(emotion, "yoga_exercise", user_language), emotion
        elif cmd == "summary":
            return get_session_summary(lang=user_language), "neutral"
        elif cmd == "help":
            return get_help(user_language), "neutral"
        elif cmd == "reset":
            session_memory.clear()
            recent_emotions.clear()
            asked_open_ended_for_session.clear()
            professional_help_suggested = False
            last_suggested_activity = None
            last_intervention = None
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            save_session()
            return translate_text("Session reset. Starting fresh!", user_language), "neutral"

    # Prioritize SOS detection after commands
    sos_check = detect_sos_refined(user_input, user_language)
    if sos_check == 'yes':
        logging.info("SOS response triggered")
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        return sos_response_text(user_language), 'sos'
    elif sos_check == 'clarify':
        awaiting_sos_clarify = True
        sos_clarify_retries = 0
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info("SOS clarification requested")
        return translate_text("I hear something concerning. Are you thinking about harming yourself, or is this exam stress? (Reply 'harm' or 'stress')", user_language), 'clarify'

    # Handle SOS clarification state
    if awaiting_sos_clarify:
        sos_clarify_retries += 1
        if sos_clarify_retries > 2:
            awaiting_sos_clarify = False
            sos_clarify_retries = 0
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            return translate_text("CareBot: Let's move on. How can I assist you now?", user_language), "neutral"
        if 'harm' in lower:
            awaiting_sos_clarify = False
            sos_clarify_retries = 0
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            return sos_response_text(user_language), 'sos'
        elif 'stress' in lower:
            awaiting_sos_clarify = False
            sos_clarify_retries = 0
            awaiting_positive_followup = False
            awaiting_anxiety_followup = True
            awaiting_sadness_followup = False
            return translate_text("Okay, sounds like exam stress. What's been going on with your studies?", user_language), 'anxiety'
        else:
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            return translate_text("Please reply 'harm' or 'stress' to clarify.", user_language), 'clarify'

    # Handle confirmation for suggested activity
    confirmation_words = ["ok", "okay", "yes", "yess", "sure", "‡§†‡•Ä‡§ï ‡§π‡•à", "‡§π‡§æ‡§Å", "‡§ö‡§≤‡§ø‡§è ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç"]
    if last_suggested_activity and any(w in lower for w in confirmation_words):
        logging.info(f"Running suggested activity: {last_suggested_activity}")
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        return run_activity(last_suggested_activity, user_language), "neutral"

    # Handle meta-comments
    meta_comments = ["issue", "problem", "bug", "error", "same issue"]
    if any(mc in lower for mc in meta_comments):
        reply = "I noticed you mentioned an issue. Can you describe it, or would you like to continue with an activity, music, yoga/exercise video, or chat?"
        conversation_history.append(user_input)
        last_suggested_activity = None
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), "neutral"

    # Activity direct fuzzy match
    for key in activities.keys():
        try:
            match, score, _ = process.extractOne(
                user_input,
                [ACTIVITY_NAMES[key][user_language], key],
                scorer=fuzz.partial_ratio
            )
        except Exception:
            match, score = None, 0
        if score >= 75:
            last_suggested_activity = None
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            return run_activity(key, user_language), "neutral"

    # Emotion detection
    emotion = detect_emotion(user_input, last_emotion)
    prev_emotion = last_emotion
    last_emotion = emotion

    # Update recent_emotions
    if not recent_emotions or recent_emotions[-1] != emotion:
        recent_emotions.append(emotion)
    if len(recent_emotions) > 6:
        recent_emotions.pop(0)
    logging.info(f"Recent emotions: {recent_emotions}")

    # Clear negative streak only on clear positive inputs
    positive_phrases = ["feeling better", "getting better", "improving", "less sad", "not as anxious", "not as angry", "feeling relieved", "relieved from", "better", "fine", "good", "great", "‡§¨‡•á‡§π‡§§‡§∞ ‡§Æ‡§π‡§∏‡•Ç‡§∏", "‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§≤‡§ó ‡§∞‡§π‡§æ"]
    if emotion in ["relief", "joy"] or any(p in lower for p in positive_phrases):
        recent_emotions.clear()
        professional_help_suggested = False
        last_suggested_activity = None
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False

    # Record emotion
    date = today_iso_date()
    if date not in session_memory:
        session_memory[date] = {"emotions": [], "interventions": []}
    session_memory[date]["emotions"].append(emotion)
    save_session()

    # Persistent negative emotion alert
    negative_emotions = ["sadness", "anxiety", "anger", "fear", "hopelessness"]
    if not professional_help_suggested and len(recent_emotions) >= 3 and all(e in negative_emotions for e in recent_emotions[-3:]):
        professional_help_suggested = True
        last_suggested_activity = None
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        return suggest_professional_help(user_language), emotion
    elif professional_help_suggested and emotion in negative_emotions + ["neutral"]:
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        return suggest_professional_help(user_language), emotion

    # Check for exam-related anxiety
    is_exam_related = any(kw in translate_text(user_input, 'en').lower() for kw in ACADEMIC_KEYWORDS) or any(kw in lower for kw in ACADEMIC_KEYWORDS)
    if emotion == "anxiety" and is_exam_related:
        last_suggested_activity = "exam_stress_break"
        awaiting_positive_followup = False
        awaiting_anxiety_followup = True
        awaiting_sadness_followup = False
        reply = "I'm sorry you're feeling stressed about exams. What's been going on with your studies?"
        if conversation_history and conversation_history[-1] != user_input:
            previous_input = conversation_history[-1]
            translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Is this related to your stress?", user_language)
            reply = f"{reply} {translated_prev}"
        conversation_history.append(user_input)
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Handle sadness response
    if emotion == "sadness":
        awaiting_sadness_followup = True
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        reply = random.choice(empathetic_replies.get("sadness"))
        if conversation_history and conversation_history[-1] != user_input:
            previous_input = conversation_history[-1]
            translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Does this relate?", user_language)
            reply = f"{reply} {translated_prev}"
        conversation_history.append(user_input)
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Handle anxiety response
    if emotion == "anxiety":
        awaiting_anxiety_followup = True
        awaiting_positive_followup = False
        awaiting_sadness_followup = False
        reply = random.choice(empathetic_replies.get("anxiety"))
        if conversation_history and conversation_history[-1] != user_input:
            previous_input = conversation_history[-1]
            translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Is this related to your stress?", user_language)
            reply = f"{reply} {translated_prev}"
        conversation_history.append(user_input)
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Check if last intervention was an activity or media recommendation
    if date in session_memory and session_memory[date]["interventions"] and last_intervention:
        logging.info(f"Last intervention: {last_intervention}")
    else:
        last_intervention = None
        logging.info("No valid last_intervention found.")

    # Handle positive responses post-intervention
    if emotion in ["relief", "joy"] and last_intervention:
        intervention_desc = ""
        if last_intervention in ACTIVITY_NAMES:
            intervention_desc = ACTIVITY_NAMES.get(last_intervention, {"en": "previous activity", "hi": "‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø"})[user_language]
        elif last_intervention == "music_recommendation":
            intervention_desc = translate_text("music", user_language)
        elif last_intervention == "yoga_exercise_recommendation":
            intervention_desc = translate_text("yoga", user_language)

        recent_interventions = session_memory[date]["interventions"][-3:] if date in session_memory else []
        intervention_types = set(recent_interventions)
        if len(intervention_types) > 1:
            interventions_list = []
            if any(i in ACTIVITY_NAMES for i in recent_interventions):
                interventions_list.append(translate_text("activity", user_language).lower())
            if "music_recommendation" in recent_interventions:
                interventions_list.append(translate_text("music", user_language).lower())
            if "yoga_exercise_recommendation" in recent_interventions:
                interventions_list.append(translate_text("yoga", user_language).lower())
            intervention_desc = " and ".join(interventions_list)
        elif intervention_desc:
            intervention_desc = intervention_desc.lower()
        else:
            intervention_desc = translate_text("things we tried", user_language).lower()

        reply = f"I'm glad to hear that! It sounds like the {intervention_desc} helped. Would you like to try another activity, listen to more music, watch a yoga/exercise video, just chat or end this session ?"
        awaiting_positive_followup = True
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        conversation_history.append(user_input)
        last_suggested_activity = None
        logging.info(f"Post-intervention positive response, acknowledging {intervention_desc}: {reply}")
        return translate_text(reply, user_language), emotion

    # Handle neutral response with suggested activity
    if emotion == "neutral" and last_suggested_activity:
        reply = f"Would you like to try the '{ACTIVITY_NAMES[last_suggested_activity][user_language]}' activity, or something else?"
        conversation_history.append(user_input)
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # First-time open-ended prompt with input tracking
    input_hash = hashlib.md5(user_input.encode()).hexdigest()
    prompt_key = f"{emotion}_{session_stage}_{input_hash}"
    if prompt_key not in asked_open_ended_for_session:
        asked_open_ended_for_session.add(prompt_key)
        if emotion in ["joy"]:
            last_suggested_activity = None
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            reply = random.choice(empathetic_replies.get("joy"))
            if conversation_history and conversation_history[-1] != user_input:
                previous_input = conversation_history[-1]
                translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Does this relate?", user_language)
                reply = f"{reply} {translated_prev}"
            conversation_history.append(user_input)
            logging.info(f"Conversation history updated: {conversation_history}")
            return translate_text(reply, user_language), emotion
        reply = random.choice(empathetic_replies.get(emotion, small_talk_replies))
        if emotion in negative_emotions:
            suggested_activity = "gratitude_micro" if emotion == "sadness" else "breathing_4_6"
            last_suggested_activity = suggested_activity
            reply += f" Would you like to try the '{ACTIVITY_NAMES[suggested_activity][user_language]}' activity, listen to music, or watch a yoga/exercise video?"
        if conversation_history and conversation_history[-1] != user_input:
            previous_input = conversation_history[-1]
            translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Does this relate?", user_language)
            reply = f"{reply} {translated_prev}"
        conversation_history.append(user_input)
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Closure prompt in late stage
    if session_stage == "late":
        reply = random.choice(empathetic_replies.get(emotion, small_talk_replies))
        reply += " Would you like to continue chatting, try an activity, listen to music, try a yoga/exercise video, or end the session?"
        if conversation_history and conversation_history[-1] != user_input:
            previous_input = conversation_history[-1]
            translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Does this relate?", user_language)
            reply = f"{reply} {translated_prev}"
        conversation_history.append(user_input)
        last_suggested_activity = None
        awaiting_positive_followup = False
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Special handling for relief/joy without recent interventions
    if emotion in ["relief", "joy"]:
        if prev_emotion in negative_emotions and session_stage in ["mid", "late"]:
            reply = f"I'm glad to hear that! What's helping you feel better right now?"
            awaiting_positive_followup = True
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            conversation_history.append(user_input)
            last_suggested_activity = None
            logging.info(f"Conversation history updated: {conversation_history}")
            return translate_text(reply, user_language), emotion
        if session_stage == "early":
            reply = random.choice(empathetic_replies.get("joy", small_talk_replies))
            conversation_history.append(user_input)
            last_suggested_activity = None
            awaiting_positive_followup = False
            awaiting_anxiety_followup = False
            awaiting_sadness_followup = False
            logging.info(f"Conversation history updated: {conversation_history}")
            return translate_text(reply, user_language), emotion
        reply = random.choice(empathetic_replies.get("relief", empathetic_replies.get("joy", small_talk_replies)))
        conversation_history.append(user_input)
        last_suggested_activity = None
        awaiting_positive_followup = True
        awaiting_anxiety_followup = False
        awaiting_sadness_followup = False
        logging.info(f"Conversation history updated: {conversation_history}")
        return translate_text(reply, user_language), emotion

    # Empathetic response
    reply = random.choice(empathetic_replies.get(emotion, small_talk_replies))
    if emotion in negative_emotions:
        suggested_activity = "gratitude_micro" if emotion == "sadness" else "breathing_4_6"
        last_suggested_activity = suggested_activity
        reply += f" Would you like to try the '{ACTIVITY_NAMES[suggested_activity][user_language]}' activity, listen to music, or watch a yoga/exercise video?"
    if conversation_history and conversation_history[-1] != user_input:
        previous_input = conversation_history[-1]
        translated_prev = translate_text(f"Earlier you mentioned '{previous_input}'. Does this relate?", user_language)
        reply = f"{reply} {translated_prev}"
    conversation_history.append(user_input)
    awaiting_positive_followup = False
    awaiting_anxiety_followup = False
    awaiting_sadness_followup = False
    logging.info(f"Conversation history updated: {conversation_history}")

    return translate_text(reply, user_language), emotion

# ------------------ MAIN LOOP ------------------
if __name__ == "__main__":
    print(translate_text("üëã Hi! I‚Äôm CareBot, here to keep you company. üíô", user_language))
    print(translate_text("You can share how you‚Äôre doing, chat with me, or check out tools like 'activities', 'music', 'yoga', or 'book session'.", user_language))
    print(translate_text("‚ú® Quick guide: type 'help' to see commands, 'summary' for your session notes, or 'reset' to clear things up.", user_language))
    print(translate_text("When you‚Äôre ready to leave, just type 'quit' or 'exit'. I‚Äôll be here next time. üåø\n", user_language))

    try:
        while True:
            user_input = input("You: ").strip()
            if not user_input:
                continue
            if user_input.lower() in ["quit", "exit", "end", "end session", "‡§∏‡§Æ‡§æ‡§™‡•ç‡§§", "‡§¨‡§Ç‡§¶", "‡§ñ‡§§‡•ç‡§Æ", "‡§∏‡§§‡•ç‡§∞ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§"]:
                print(translate_text("CareBot: Take care! üíô", user_language))
                save_session()
                logging.info("Session ended by user command.")
                break

            response, detected_emotion = carebot_reply(user_input)
            print("\n", response, "\n")
    except KeyboardInterrupt:
        save_session()
        print("\n" + translate_text("CareBot: Session saved. Take care! üíô", user_language))
        logging.info("Session ended by keyboard interrupt.")